plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
}

version = project.version
group = project.project_group

repositories {
    mavenCentral()
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kt_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
               "kotlin" : project.fabric_kt_version,
               "loader" : project.loader_version,
               "minecraft" : project.minecraft_version_wildcard,
               "group" : project.project_group,
               "project" : project.project_id,
               "project_name" : project.project_name,
               "project_description": project.project_description,
               "repo" : project.project_repo,
               "entryPoint" : project.project_entrypoint_main,
               "entryPointClient" : project.project_entrypoint_client,
               "entryPointServer" : project.project_entrypoint_server
    }

    filesMatching("${project_id}.mixins.json") {
        expand "java_ver" : project.java_ver,
               "project" : project.project_id,
               "project_group" : project.project_group
    }
}

def id = project.project_id
loom {
    project_id = id
    accessWidenerPath = file("src/main/resources/${project_id}.accesswidener")
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (project.java_ver as Integer >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = project.java_ver as Integer
    }
}

java {
    def javaVersion = JavaVersion.toVersion(project.java_ver as Integer)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(project.java_ver as Integer)
    }
    archivesBaseName = project.project_id
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = project.java_ver
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = project.java_ver
    }
}
